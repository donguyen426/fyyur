from datetime import datetime
from flask_wtf import FlaskForm
from wtforms import (
    StringField,
    SelectField,
    SelectMultipleField,
    DateTimeField,
    BooleanField,
    IntegerField,
)
from wtforms.validators import DataRequired, AnyOf, URL, Regexp, Optional
from wtforms import ValidationError

states = [
    ("AL", "AL"),
    ("AK", "AK"),
    ("AZ", "AZ"),
    ("AR", "AR"),
    ("CA", "CA"),
    ("CO", "CO"),
    ("CT", "CT"),
    ("DE", "DE"),
    ("DC", "DC"),
    ("FL", "FL"),
    ("GA", "GA"),
    ("HI", "HI"),
    ("ID", "ID"),
    ("IL", "IL"),
    ("IN", "IN"),
    ("IA", "IA"),
    ("KS", "KS"),
    ("KY", "KY"),
    ("LA", "LA"),
    ("ME", "ME"),
    ("MT", "MT"),
    ("NE", "NE"),
    ("NV", "NV"),
    ("NH", "NH"),
    ("NJ", "NJ"),
    ("NM", "NM"),
    ("NY", "NY"),
    ("NC", "NC"),
    ("ND", "ND"),
    ("OH", "OH"),
    ("OK", "OK"),
    ("OR", "OR"),
    ("MD", "MD"),
    ("MA", "MA"),
    ("MI", "MI"),
    ("MN", "MN"),
    ("MS", "MS"),
    ("MO", "MO"),
    ("PA", "PA"),
    ("RI", "RI"),
    ("SC", "SC"),
    ("SD", "SD"),
    ("TN", "TN"),
    ("TX", "TX"),
    ("UT", "UT"),
    ("VT", "VT"),
    ("VA", "VA"),
    ("WA", "WA"),
    ("WV", "WV"),
    ("WI", "WI"),
    ("WY", "WY"),
]
genres = [
    ("Alternative", "Alternative"),
    ("Blues", "Blues"),
    ("Classical", "Classical"),
    ("Country", "Country"),
    ("Electronic", "Electronic"),
    ("Folk", "Folk"),
    ("Funk", "Funk"),
    ("Hip-Hop", "Hip-Hop"),
    ("Heavy Metal", "Heavy Metal"),
    ("Instrumental", "Instrumental"),
    ("Jazz", "Jazz"),
    ("Musical Theatre", "Musical Theatre"),
    ("Pop", "Pop"),
    ("Punk", "Punk"),
    ("R&B", "R&B"),
    ("Reggae", "Reggae"),
    ("Rock n Roll", "Rock n Roll"),
    ("Soul", "Soul"),
    ("Other", "Other"),
]
phone_area_codes = {
    "907": "AK",
    "205": "AL",
    "251": "AL",
    "256": "AL",
    "334": "AL",
    "479": "AR",
    "501": "AR",
    "870": "AR",
    "480": "AZ",
    "520": "AZ",
    "602": "AZ",
    "623": "AZ",
    "928": "AZ",
    "236": "BC",
    "250": "BC",
    "604": "BC",
    "778": "BC",
    "209": "CA",
    "213": "CA",
    "310": "CA",
    "323": "CA",
    "341": "CA",
    "369": "CA",
    "408": "CA",
    "415": "CA",
    "424": "CA",
    "442": "CA",
    "510": "CA",
    "530": "CA",
    "559": "CA",
    "562": "CA",
    "619": "CA",
    "626": "CA",
    "627": "CA",
    "628": "CA",
    "650": "CA",
    "657": "CA",
    "661": "CA",
    "669": "CA",
    "707": "CA",
    "714": "CA",
    "747": "CA",
    "760": "CA",
    "764": "CA",
    "805": "CA",
    "818": "CA",
    "831": "CA",
    "858": "CA",
    "909": "CA",
    "916": "CA",
    "925": "CA",
    "935": "CA",
    "949": "CA",
    "951": "CA",
    "303": "CO",
    "719": "CO",
    "720": "CO",
    "970": "CO",
    "203": "CT",
    "475": "CT",
    "860": "CT",
    "959": "CT",
    "202": "DC",
    "302": "DE",
    "239": "FL",
    "305": "FL",
    "321": "FL",
    "352": "FL",
    "386": "FL",
    "407": "FL",
    "561": "FL",
    "689": "FL",
    "727": "FL",
    "754": "FL",
    "772": "FL",
    "786": "FL",
    "813": "FL",
    "850": "FL",
    "863": "FL",
    "904": "FL",
    "927": "FL",
    "941": "FL",
    "954": "FL",
    "229": "GA",
    "404": "GA",
    "470": "GA",
    "478": "GA",
    "678": "GA",
    "706": "GA",
    "762": "GA",
    "770": "GA",
    "912": "GA",
    "671": "GU",
    "808": "HI",
    "319": "IA",
    "515": "IA",
    "563": "IA",
    "641": "IA",
    "712": "IA",
    "208": "ID",
    "217": "IL",
    "224": "IL",
    "309": "IL",
    "312": "IL",
    "331": "IL",
    "464": "IL",
    "618": "IL",
    "630": "IL",
    "708": "IL",
    "773": "IL",
    "779": "IL",
    "815": "IL",
    "847": "IL",
    "872": "IL",
    "219": "IN",
    "260": "IN",
    "317": "IN",
    "574": "IN",
    "765": "IN",
    "812": "IN",
    "316": "KS",
    "620": "KS",
    "785": "KS",
    "913": "KS",
    "270": "KY",
    "502": "KY",
    "606": "KY",
    "859": "KY",
    "225": "LA",
    "318": "LA",
    "337": "LA",
    "504": "LA",
    "985": "LA",
    "339": "MA",
    "351": "MA",
    "413": "MA",
    "508": "MA",
    "617": "MA",
    "774": "MA",
    "781": "MA",
    "857": "MA",
    "978": "MA",
    "204": "MB",
    "431": "MB",
    "240": "MD",
    "301": "MD",
    "410": "MD",
    "443": "MD",
    "667": "MD",
    "207": "ME",
    "231": "MI",
    "248": "MI",
    "269": "MI",
    "278": "MI",
    "313": "MI",
    "517": "MI",
    "586": "MI",
    "616": "MI",
    "679": "MI",
    "734": "MI",
    "810": "MI",
    "906": "MI",
    "947": "MI",
    "989": "MI",
    "218": "MN",
    "320": "MN",
    "507": "MN",
    "612": "MN",
    "651": "MN",
    "763": "MN",
    "952": "MN",
    "314": "MO",
    "417": "MO",
    "557": "MO",
    "573": "MO",
    "636": "MO",
    "660": "MO",
    "816": "MO",
    "975": "MO",
    "670": "MP",
    "228": "MS",
    "601": "MS",
    "662": "MS",
    "769": "MS",
    "406": "MT",
    "506": "NB",
    "252": "NC",
    "336": "NC",
    "704": "NC",
    "743": "NC",
    "828": "NC",
    "910": "NC",
    "919": "NC",
    "980": "NC",
    "984": "NC",
    "701": "ND",
    "308": "NE",
    "402": "NE",
    "603": "NH",
    "201": "NJ",
    "551": "NJ",
    "609": "NJ",
    "732": "NJ",
    "848": "NJ",
    "856": "NJ",
    "862": "NJ",
    "908": "NJ",
    "973": "NJ",
    "709": "NL",
    "505": "NM",
    "575": "NM",
    "957": "NM",
    "782": "NS",
    "902": "NS",
    "702": "NV",
    "725": "NV",
    "775": "NV",
    "212": "NY",
    "315": "NY",
    "332": "NY",
    "347": "NY",
    "516": "NY",
    "518": "NY",
    "585": "NY",
    "607": "NY",
    "631": "NY",
    "646": "NY",
    "716": "NY",
    "718": "NY",
    "845": "NY",
    "914": "NY",
    "917": "NY",
    "929": "NY",
    "216": "OH",
    "220": "OH",
    "234": "OH",
    "283": "OH",
    "330": "OH",
    "380": "OH",
    "419": "OH",
    "440": "OH",
    "513": "OH",
    "567": "OH",
    "614": "OH",
    "740": "OH",
    "937": "OH",
    "405": "OK",
    "539": "OK",
    "580": "OK",
    "918": "OK",
    "226": "ON",
    "289": "ON",
    "343": "ON",
    "365": "ON",
    "416": "ON",
    "437": "ON",
    "519": "ON",
    "548": "ON",
    "613": "ON",
    "647": "ON",
    "705": "ON",
    "807": "ON",
    "905": "ON",
    "458": "OR",
    "503": "OR",
    "541": "OR",
    "971": "OR",
    "215": "PA",
    "223": "PA",
    "267": "PA",
    "272": "PA",
    "412": "PA",
    "484": "PA",
    "570": "PA",
    "610": "PA",
    "717": "PA",
    "724": "PA",
    "814": "PA",
    "835": "PA",
    "878": "PA",
    "787": "PR",
    "939": "PR",
    "418": "QC",
    "438": "QC",
    "450": "QC",
    "481": "QC",
    "514": "QC",
    "579": "QC",
    "581": "QC",
    "819": "QC",
    "873": "QC",
    "401": "RI",
    "803": "SC",
    "843": "SC",
    "864": "SC",
    "605": "SD",
    "306": "SK",
    "639": "SK",
    "423": "TN",
    "615": "TN",
    "629": "TN",
    "731": "TN",
    "865": "TN",
    "901": "TN",
    "931": "TN",
    "210": "TX",
    "214": "TX",
    "254": "TX",
    "281": "TX",
    "325": "TX",
    "346": "TX",
    "361": "TX",
    "409": "TX",
    "430": "TX",
    "432": "TX",
    "469": "TX",
    "512": "TX",
    "682": "TX",
    "713": "TX",
    "737": "TX",
    "806": "TX",
    "817": "TX",
    "830": "TX",
    "832": "TX",
    "903": "TX",
    "915": "TX",
    "936": "TX",
    "940": "TX",
    "956": "TX",
    "972": "TX",
    "979": "TX",
    "385": "UT",
    "435": "UT",
    "801": "UT",
    "276": "VA",
    "434": "VA",
    "540": "VA",
    "571": "VA",
    "703": "VA",
    "757": "VA",
    "804": "VA",
    "340": "VI",
    "802": "VT",
    "206": "WA",
    "253": "WA",
    "360": "WA",
    "425": "WA",
    "509": "WA",
    "564": "WA",
    "262": "WI",
    "414": "WI",
    "608": "WI",
    "715": "WI",
    "920": "WI",
    "304": "WV",
    "681": "WV",
    "307": "WY",
}


def validate_phone_number(form, field):
    enteredPhoneNumber = str(field.data).replace(" ", "").replace("-", "")
    code = enteredPhoneNumber[0:3]
    if (len(enteredPhoneNumber) != 10) or (enteredPhoneNumber.isnumeric() == False):
        raise ValidationError(
            "Invalid phone number. Accepted formats: '6501112222' or '650-111-2222'"
        )
    elif code not in phone_area_codes:
        raise ValidationError("Bad phone number. Area code does not exist")
    else:
        state = form.state.data
        if state.__ne__(phone_area_codes[code]):
            raise ValidationError(
                f"Phone number's area code does not belong to {state}"
            )


def validate_facebook_link(form, field):
    if "https://facebook.com" not in field.data:
        raise ValidationError("Invalid Facebook link")


class ShowForm(FlaskForm):
    artist_id = IntegerField("artist_id", validators=[DataRequired()])
    venue_id = IntegerField("venue_id", validators=[DataRequired()])
    start_time = DateTimeField(
        "start_time", validators=[DataRequired()], default=datetime.today()
    )


class VenueForm(FlaskForm):
    name = StringField("name", validators=[DataRequired()])
    city = StringField("city", validators=[DataRequired()])
    state = SelectField("state", validators=[DataRequired()], choices=states)
    address = StringField("address", validators=[DataRequired()])
    phone = StringField(
        # TODO implement validation logic for state
        "phone",
        validators=[Optional(), validate_phone_number],
    )
    image_link = StringField("image_link")
    genres = SelectMultipleField(
        # TODO implement enum restriction
        "genres",
        validators=[DataRequired()],
        choices=genres,
    )
    facebook_link = StringField(
        "facebook_link", validators=[Optional(), validate_facebook_link]
    )
    website_link = StringField("website_link", validators=[Optional(), URL()])

    seeking_talent = BooleanField("seeking_talent")

    seeking_description = StringField("seeking_description")


class ArtistForm(FlaskForm):
    name = StringField("name", validators=[DataRequired()])
    city = StringField("city", validators=[DataRequired()])
    state = SelectField("state", validators=[DataRequired()], choices=states)
    phone = StringField(
        # TODO implement validation logic for state
        "phone",
        validators=[Optional(), validate_phone_number],
    )
    image_link = StringField(
        "image_link",  # validators=[URL(message='Invalid URL')]
    )
    genres = SelectMultipleField("genres", validators=[DataRequired()], choices=genres)
    facebook_link = StringField(
        "facebook_link", validators=[Optional(), validate_facebook_link]
    )
    website_link = StringField("website_link", validators=[Optional(), URL()])

    seeking_venue = BooleanField("seeking_venue")

    seeking_description = StringField("seeking_description")
